if(UNIX)
  if (armv6l STREQUAL ${CMAKE_HOST_SYSTEM_PROCESSOR})
    message(STATUS "CPU is armv6l. Assuming Raspberry Pi and OpenGL ES 2.")
    set(OPENGL_LIBRARIES GLESv2)
    include_directories(glsys/opengles/include)
    set(PLATFORM_SRCS glsys/opengles/src/glsys.c)
  elseif(CYGWIN)
    include_directories(glsys/opengl/include)
    set(PLATFORM_SRCS glsys/opengl/src/glsys.c)
    set(OPENGL_LIBRARIES opengl32)
  else()
    include_directories(glsys/opengl/include)
    set(PLATFORM_SRCS glsys/opengl/src/glsys.c)
    find_package(OpenGL REQUIRED)
  endif()
  find_package(PkgConfig)
  pkg_check_modules(SDL2_PC REQUIRED sdl2)
  add_compile_options(${SDL2_PC_CFLAGS})
  set(SDL2_LIBRARIES ${SDL2_PC_LDFLAGS})
elseif(MSVC)
  include_directories(glsys/opengl/include)
  set(PLATFORM_SRCS glsys/opengl/src/glsys.c)
  find_package(OpenGL REQUIRED)
  set(SDL2_LIBRARIES SDL2 SDL2main)
endif()

add_subdirectory(shaders)
include_directories(../3dmath/include)

add_executable(sdl_gl_info sdl_gl_info.c ${PLATFORM_SRCS})
target_link_libraries(sdl_gl_info 3dmath ${SDL2_LIBRARIES} ${OPENGL_LIBRARIES})

add_executable(sdl_gl_test sdl_gl_test.c ${PLATFORM_SRCS})
target_link_libraries(sdl_gl_test ${SDL2_LIBRARIES} ${OPENGL_LIBRARIES})

add_executable(chapter_04 chapter_04.c ${PLATFORM_SRCS})
add_dependencies(chapter_04 shaders)
target_link_libraries(chapter_04 ${SDL2_LIBRARIES} ${OPENGL_LIBRARIES})

add_executable(chapter_06 chapter_06.c ${PLATFORM_SRCS})
add_dependencies(chapter_06 shaders)
target_link_libraries(chapter_06 ${SDL2_LIBRARIES} ${OPENGL_LIBRARIES})

add_executable(chapter_06-buffer_objects chapter_06-buffer_objects.c ${PLATFORM_SRCS})
add_dependencies(chapter_06-buffer_objects shaders)
target_link_libraries(chapter_06-buffer_objects ${SDL2_LIBRARIES} ${OPENGL_LIBRARIES})

if(MSVC)
  set(SDL2_DLL_SRC ${MSVC_EXT_LIBRARY_DIR}/$<CONFIGURATION>/SDL2.dll)
  set(SDL2_DLL_DEST ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/SDL2.dll)
  foreach(PROJECT_NAME sdl_gl_info sdl_gl_test chapter_04 chapter_06 chapter_06-buffer_objects)
    add_custom_command(TARGET ${PROJECT_NAME}
      POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SDL2_DLL_SRC} ${SDL2_DLL_DEST})
  endforeach(PROJECT_NAME)
endif()
